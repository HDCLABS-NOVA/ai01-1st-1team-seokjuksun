"""
================================================================================
위험도 지수 실시간 차트 - 한 줄 한 줄 상세 주석 설명
================================================================================
차트 목적:
- 실시간 고장 위험도(0-100%) 시각화
- 7개 구성요소의 가중 평균으로 계산된 종합 위험도 표시
- 경고(70%) / 위험(90%) 임계값과 비교
- 20개 데이터 포인트 이동평균선으로 추세 파악
================================================================================
"""

# ═════════════════════════════════════════════════════════════════════════════
# Part 1: 위험도 지수 계산 방식
# ═════════════════════════════════════════════════════════════════════════════

"""
■ 위험도 지수 = 7개 구성요소의 가중 평균
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

총 위험도 = Σ(각 구성요소 점수 × 가중치)

구성요소 7가지:
────────────────────────────────────────────────────────────────
1. 메인 모터 과부하      × 0.18 (18%)
2. 오일 공급 압력        × 0.12 (12%)
3. 유압 공급 불안정      × 0.12 (12%)
4. 통계적 이상 심각도    × 0.23 (23%) ← 가장 중요!
5. 비정상 상태 지속 시간 × 0.13 (13%)
6. 순간 센서 급변        × 0.12 (12%)
7. 온도 제어 불안정      × 0.10 (10%)
                          ─────
                           1.00 (100%)


■ 계산 예시:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

어느 시점의 각 구성요소 점수:
────────────────────────────────────────────────────────────────
1. 메인 모터 과부하:      50점 (2개 모터 이상)
2. 오일 공급 압력:        100점 (심각한 압력 저하)
3. 유압 공급 불안정:      0점 (정상)
4. 통계적 이상 심각도:    75점 (여러 센서 경고)
5. 비정상 상태 지속시간:  30점 (12초 지속)
6. 순간 센서 급변:        0점 (급변 없음)
7. 온도 제어 불안정:      60점 (변동 있음)

총 위험도 계산:
────────────────────────────────────────────────────────────────
= 50×0.18 + 100×0.12 + 0×0.12 + 75×0.23 + 30×0.13 + 0×0.12 + 60×0.10
= 9.0 + 12.0 + 0 + 17.25 + 3.9 + 0 + 6.0
= 48.15%

→ 48.15% 위험도 (정상 범위, 녹색)


■ 왜 가중치를 다르게 설정했나?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

통계적 이상 심각도 (23%): 가장 높음
────────────────────────────────────────────────────────────────
- 13개 센서의 Z-score를 종합 평가
- 가장 객관적이고 신뢰할 수 있는 지표
- 제조업 데이터 분석의 기본

메인 모터 과부하 (18%): 두 번째
────────────────────────────────────────────────────────────────
- 메인 모터 = 설비의 심장
- 고장 시 전체 설비 정지
- 수리 비용 매우 높음

비정상 지속시간 (13%): 세 번째
────────────────────────────────────────────────────────────────
- 순간적 이상 vs 지속적 이상 구분
- 긴 지속시간 = 심각한 문제

오일/유압/급변 (각 12%): 중간 수준
────────────────────────────────────────────────────────────────
- 모두 중요하지만 보조적 지표
- 단독으로는 고장 직결 안 됨

온도 불안정 (10%): 가장 낮음
────────────────────────────────────────────────────────────────
- 온도는 천천히 변함
- 즉각적 고장보다는 장기적 영향
"""

RISK_WEIGHTS = {
    '메인 모터 과부하': 0.18,
    '오일 공급 압력': 0.12,
    '유압 공급 불안정': 0.12,
    '통계적 이상 심각도': 0.23,  # 가장 중요!
    '비정상 상태 지속 시간': 0.13,
    '순간 센서 급변': 0.12,
    '온도 제어 불안정': 0.10,
}

# 실제 계산 코드:
total_prob = sum(components[key]['score'] * weights[key] for key in weights)
# components: 각 구성요소의 점수 딕셔너리
# weights: 가중치 딕셔너리
# key: 구성요소 이름


# ═════════════════════════════════════════════════════════════════════════════
# Part 2: 이동평균(Moving Average) 계산
# ═════════════════════════════════════════════════════════════════════════════

"""
■ 이동평균이란?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Moving Average (MA) = 최근 N개 데이터의 평균을 계산하여 추세를 파악

FAILURE_PROB_MA_WINDOW = 20
→ 최근 20개 위험도 점수의 평균


■ 왜 20개를 선택했나?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

TIME_RESAMPLE = "0.5S" (0.5초마다 데이터 수집)
20개 × 0.5초 = 10초 윈도우

너무 작은 윈도우 (예: 5개 = 2.5초):
────────────────────────────────────────────────────────────────
- 노이즈에 민감
- 이동평균선이 실시간 라인과 거의 겹침
- 추세 파악 어려움

너무 큰 윈도우 (예: 100개 = 50초):
────────────────────────────────────────────────────────────────
- 반응이 느림
- 위험도가 급증해도 평균은 천천히 증가
- 실시간성 저하

20개 (10초):
────────────────────────────────────────────────────────────────
✓ 노이즈 제거 (짧은 스파이크 무시)
✓ 빠른 반응 (10초면 추세 파악)
✓ 시각적으로 구분 용이


■ 계산 예시:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

시간      idx   위험도   최근20개의 평균 (이동평균)
10:00:00   0    45.2     45.2           (1개만 있음)
10:00:01   1    46.1     45.65          (2개 평균)
...
10:00:09  18    48.5     47.1           (19개 평균)
10:00:10  19    50.2     47.5           (20개 평균 시작!)
10:00:11  20    51.3     47.8           ← 첫 값(45.2) 제외
10:00:12  21    49.5     48.0           ← 두 번째(46.1) 제외
                          ↑
                    최근 20개만 사용

실시간 값: 튀었다 내려갔다 (노이즈 많음)
[45, 46, 55, 44, 47, 65, 46, 48, ...]

이동평균: 부드러운 곡선 (추세 명확)
[45, 45.6, 47.2, 46.8, 47.5, 49.8, 49.2, 49.0, ...]


■ Pandas로 이동평균 계산:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

probs = [45.2, 46.1, 48.5, 50.2, 51.3, ...]  # 위험도 리스트

moving_average = pd.Series(probs).rolling(
    window=20,        # 20개 윈도우
    min_periods=1     # 최소 1개만 있어도 평균 계산
).mean()

결과:
[45.2, 45.65, 47.1, 47.5, 47.8, ...]


왜 min_periods=1을 사용?
────────────────────────────────────────────────────────────────
초기에는 20개 데이터가 없음
- min_periods=20: 처음 19개는 NaN (표시 안 됨)
- min_periods=1: 처음부터 가능한 평균 표시

효과: 차트 시작부터 이동평균선 표시 가능
"""

FAILURE_PROB_MA_WINDOW = 20

moving_average = pd.Series(probs).rolling(
    window=FAILURE_PROB_MA_WINDOW,
    min_periods=1
).mean()

# ═════════════════════════════════════════════════════════════════════════════
# Part 3: 슬라이딩 윈도우 (Sliding Window)
# ═════════════════════════════════════════════════════════════════════════════

"""
■ 슬라이딩 윈도우란?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

DISPLAY_WINDOW = 200 (차트에 표시할 데이터 포인트)
TIME_RESAMPLE = "0.5S"
TIME_WINDOW_SECONDS = 200 × 0.5 = 100초

→ 차트는 항상 최근 100초만 표시 (과거는 숨김)


■ 동적 X축 범위 계산:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

현재 시각을 중심으로 ±50초 표시

현재 시각 = 10:05:30

X축 범위:
시작 = 10:05:30 - 50초 = 10:04:40
끝   = 10:05:30 + 50초 = 10:06:20

차트 표시:
┌────────────────────────────────────┐
│        10:04:40 ~ 10:06:20         │
│                  ↓                 │
│              현재(빨간선)           │
└────────────────────────────────────┘


1초 후 (현재 = 10:05:31):
┌────────────────────────────────────┐
│        10:04:41 ~ 10:06:21         │
│                  ↓                 │
│              현재(빨간선)           │
└────────────────────────────────────┘

→ 차트가 왼쪽으로 "흐르는" 효과!


■ 왜 ±50초 (중심 배치)?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

방법 1: 현재부터 과거 100초만 표시
┌────────────────────────────────────┐
│ 과거────────────────현재→          │
└────────────────────────────────────┘
✗ 현재가 오른쪽 끝에 붙음
✗ 미래 예측 불가


방법 2: 현재를 중심으로 ±50초
┌────────────────────────────────────┐
│ 과거───────현재───────→ 미래       │
└────────────────────────────────────┘
✓ 현재가 중앙에 위치 (시각적으로 명확)
✓ 과거 추세와 미래 공간 모두 보임
✓ 전문적인 모니터링 시스템 느낌
"""


def calculate_dynamic_xaxis_range(current_time):
    """
    동적 X축 범위 계산 (슬라이딩 윈도우)

    ■ 입력:
    ────────────────────────────────────────────────────────────
    current_time: 현재 시각 (datetime 객체)

    ■ 출력:
    ────────────────────────────────────────────────────────────
    (x_range_start, x_range_end): X축 범위 튜플
    """
    current_time = ensure_datetime(current_time)
    # Pandas Timestamp → Python datetime 변환

    half_window = TIME_WINDOW_SECONDS / 2
    # 100초 / 2 = 50초
    # 왜 반으로 나누나? 현재를 중심으로 양쪽에 배치

    x_range_start = current_time - timedelta(seconds=half_window)
    # 현재 - 50초 = 과거 50초 지점

    x_range_end = current_time + timedelta(seconds=half_window)
    # 현재 + 50초 = 미래 50초 지점
    # (실제 데이터는 없지만 공간 확보)

    return x_range_start, x_range_end


# ═════════════════════════════════════════════════════════════════════════════
# Part 4: 위험도 지수 실시간 차트 함수
# ═════════════════════════════════════════════════════════════════════════════

def plot_failure_probability_json(failure_data: list, timestamps: list,
                                  current_prob: float, current_time) -> str:
    """
    ⭐ 위험도 지수 실시간 차트 생성 함수

    ■ 왜 이 차트를 사용했나?
    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    1. 단일 지표로 설비 상태 파악
       - 7개 복잡한 지표 → 1개 위험도 점수
       - 관리자가 즉시 이해 가능

    2. 시계열 추세 분석
       - 위험도가 증가 추세? 감소 추세?
       - 이동평균으로 노이즈 제거

    3. 임계값 기반 경고
       - 70% 넘으면 경고 (주황)
       - 90% 넘으면 위험 (빨강)
       - 색상으로 즉각 인식

    4. 실시간 모니터링
       - 슬라이딩 윈도우로 최근 100초 집중
       - 빨간 수직선으로 현재 시점 강조

    ■ 입력 파라미터:
    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    - failure_data: FailureCalculator.calculate_batch() 결과
      예: [{'total_prob': 45.2, 'components': {...}},
           {'total_prob': 46.1, 'components': {...}}, ...]

    - timestamps: 시간 리스트 (X축용)
      예: [datetime(10:00:00), datetime(10:00:01), ...]

    - current_prob: 현재 위험도 점수 (0~100)
      예: 48.15

    - current_time: 현재 시각
      예: datetime(10:05:30)

    ■ 출력:
    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    - Plotly Figure를 JSON 문자열로 변환한 값
      (Streamlit에서 st.plotly_chart()로 표시 가능)
    """

    # ═══════════════════════════════════════════════════════════════════════
    # Step 1: 시간 데이터 전처리
    # ═══════════════════════════════════════════════════════════════════════

    current_time = ensure_datetime(current_time)
    # Pandas Timestamp → Python datetime 변환
    # 이유: Plotly는 datetime 객체 선호 (버그 방지)

    timestamps = ensure_datetime_list(timestamps)
    # 리스트 전체를 datetime으로 일괄 변환
    # X축에 시간 표시할 때 일관된 타입 필요

    # ═══════════════════════════════════════════════════════════════════════
    # Step 2: 위험도 점수 추출
    # ═══════════════════════════════════════════════════════════════════════

    probs = [d['total_prob'] for d in failure_data]
    # failure_data: 딕셔너리 리스트
    # 각 딕셔너리에서 'total_prob' 키의 값만 추출
    #
    # 예시:
    # failure_data = [
    #     {'total_prob': 45.2, 'components': {...}},
    #     {'total_prob': 46.1, 'components': {...}},
    #     {'total_prob': 48.5, 'components': {...}},
    # ]
    #
    # probs = [45.2, 46.1, 48.5]

    # ═══════════════════════════════════════════════════════════════════════
    # Step 3: 이동평균 계산 (20개 포인트 = 10초)
    # ═══════════════════════════════════════════════════════════════════════

    moving_average = pd.Series(probs).rolling(
        # pd.Series: 리스트를 Pandas Series로 변환
        # 이유: Pandas의 rolling() 메서드 사용하기 위함

        window=FAILURE_PROB_MA_WINDOW,
        # window=20: 최근 20개 데이터의 평균
        # 20개 × 0.5초 = 10초 이동평균

        min_periods=1
        # 최소 1개만 있어도 평균 계산
        # 이유: 초기에도 이동평균선 표시 (NaN 방지)
    ).mean()
    # .mean(): 평균 계산 메서드

    # 결과:
    # probs = [45.2, 46.1, 48.5, 50.2, ...]
    # moving_average = [45.2, 45.65, 47.1, 47.5, ...]

    # ═══════════════════════════════════════════════════════════════════════
    # Step 4: 상태 텍스트 및 색상 결정
    # ═══════════════════════════════════════════════════════════════════════

    status_text, line_color = get_risk_status(current_prob)
    # get_risk_status: 위험도 점수에 따른 상태 반환
    #
    # 로직:
    # ────────────────────────────────────────────────────────────────
    # if current_prob >= 90:
    #     return "🔴 위험", COLOR_SCHEME['critical']  # 빨강
    # elif current_prob >= 70:
    #     return "🟡 경고", COLOR_SCHEME['warning']   # 주황
    # else:
    #     return "🟢 정상", COLOR_SCHEME['normal']    # 초록
    #
    # 예시:
    # current_prob = 48.15
    # → status_text = "🟢 정상"
    # → line_color = 'rgb(0, 200, 100)'

    # ═══════════════════════════════════════════════════════════════════════
    # Step 5: Plotly Figure 객체 생성
    # ═══════════════════════════════════════════════════════════════════════

    fig = go.Figure()
    # 빈 차트 객체 생성
    # 이후 add_trace()로 데이터 추가

    # ═══════════════════════════════════════════════════════════════════════
    # Step 6: Trace 1 - 실시간 위험도 라인 (영역 채우기)
    # ═══════════════════════════════════════════════════════════════════════

    fig.add_trace(go.Scatter(
        # go.Scatter: 산점도/선 그래프 (Plotly의 가장 기본)
        # 왜 Scatter? 시계열 데이터 시각화에 최적

        x=timestamps,
        # X축: 시간 리스트
        # [datetime(10:00:00), datetime(10:00:01), ...]

        y=probs,
        # Y축: 위험도 점수 리스트
        # [45.2, 46.1, 48.5, 50.2, ...]

        mode='lines',
        # 표시 모드:
        # - 'lines': 선만 (우리가 선택)
        # - 'markers': 점만
        # - 'lines+markers': 선+점
        #
        # 왜 'lines'만?
        # ────────────────────────────────────────────────────
        # 200개 데이터 포인트에서 점은 불필요
        # 선만으로 추세 파악 충분
        # 차트가 깔끔해짐

        name='실시간 위험도',
        # 범례에 표시될 이름
        # 사용자가 이 선이 무엇인지 이해

        line=dict(width=2.5, color='rgb(99, 102, 241)'),
        # line 스타일 설정:
        # ────────────────────────────────────────────────────
        # width=2.5: 선 두께 2.5픽셀
        #   - 기본(1)보다 굵게 → 가시성 향상
        #   - 너무 굵지 않게(5) → 정보 손실 방지
        #
        # color='rgb(99, 102, 241)': 인디고 블루
        #   - 파란색 계열: 전문적, 신뢰감
        #   - 너무 진하지 않음: 눈에 부담 없음
        #   - 경고(주황), 위험(빨강)과 구분

        fill='tozeroy',
        # 핵심 파라미터! 왜 사용했나?
        # ────────────────────────────────────────────────────
        # 'tozeroy': Y=0부터 선까지 영역 채우기
        #
        # 시각적 효과:
        #     50 ┌────/\───────
        #        │   /  \
        #     25 │  /████\      ← 채워진 영역
        #        │ /██████\
        #      0 └─────────────
        #
        # 왜 영역 채우기?
        # ────────────────────────────────────────────────────
        # 1. 위험도의 "누적감" 시각화
        #    - 높을수록 더 넓은 면적 → 직관적
        # 2. 심각도를 면적으로 인식
        #    - 70% 이상 영역이 크면 위험!
        # 3. 선만 있으면 밋밋함
        #    - 영역 채우기로 풍부한 시각화
        #
        # 다른 옵션:
        # ────────────────────────────────────────────────────
        # 'tonexty': 다음 trace까지 채우기
        # 'toself': 자기 자신으로 닫힌 영역
        # None: 채우기 없음

        fillcolor='rgba(99, 102, 241, 0.1)',
        # 채우기 색상 (RGBA 형식):
        # ────────────────────────────────────────────────────
        # R=99, G=102, B=241: 선과 같은 인디고 블루
        # A=0.1: 투명도 10%
        #
        # 왜 투명하게?
        # ────────────────────────────────────────────────────
        # 1. 불투명(A=1.0): 선이 가려져서 안 보임
        # 2. 너무 투명(A=0.01): 영역이 안 보임
        # 3. 0.1: 선도 보이고 영역도 보임 (최적)
        #
        # RGB를 선과 같게:
        # ────────────────────────────────────────────────────
        # 색상 통일로 시각적 일관성
        # 어떤 선의 영역인지 직관적으로 이해

        hovertemplate='위험도: %{y:.1f}<extra></extra>'
        # 마우스 오버 시 표시되는 툴팁 형식
        # ────────────────────────────────────────────────────
        # %{y:.1f}: Y축 값을 소수점 1자리까지 표시
        #   - y=48.156 → "48.2"로 표시
        #   - .1f: float 1자리 포맷
        #
        # <extra></extra>: 기본 trace 이름 숨기기
        #   - 없으면: "위험도: 48.2 실시간 위험도"
        #   - 있으면: "위험도: 48.2"
        #
        # 왜 커스텀 템플릿?
        # ────────────────────────────────────────────────────
        # 기본 툴팁은 너무 많은 정보 표시
        # 간단명료하게: "위험도: 48.2"만
    ))

    # ═══════════════════════════════════════════════════════════════════════
    # Step 7: Trace 2 - 이동평균선 (추세선)
    # ═══════════════════════════════════════════════════════════════════════

    fig.add_trace(go.Scatter(
        x=timestamps,
        # 실시간 라인과 같은 X축 사용
        # 이유: 시간 동기화 (같은 시점 비교)

        y=moving_average,
        # Y축: 이동평균 값
        # [45.2, 45.65, 47.1, 47.5, ...]

        mode='lines',
        # 선만 표시 (점 없음)
        # 이유: 추세선은 부드러워야 함

        name=f'{FAILURE_PROB_MA_WINDOW * 0.5:.0f}초 이동평균',
        # 범례 이름 동적 생성
        # ────────────────────────────────────────────────────
        # FAILURE_PROB_MA_WINDOW = 20
        # 20 × 0.5초 = 10초
        #
        # f-string 포맷:
        # {변수*0.5:.0f}
        #  │     │   └─ 소수점 0자리 (정수로 표시)
        #  │     └───── 0.5 곱하기 (포인트→초 변환)
        #  └─────────── 변수값
        #
        # 결과: "10초 이동평균"
        #
        # 왜 초 단위로 변환?
        # ────────────────────────────────────────────────────
        # "20개 이동평균" ← 이해하기 어려움
        # "10초 이동평균" ← 직관적!

        line=dict(width=2, color='rgb(239, 68, 68)', dash='dash'),
        # line 스타일:
        # ────────────────────────────────────────────────────
        # width=2: 실시간 라인(2.5)보다 약간 얇게
        #   이유: 보조 지표라서 덜 강조
        #
        # color='rgb(239, 68, 68)': 빨간색
        #   이유:
        #   - 실시간(파랑)과 명확히 구분
        #   - 빨강 = 추세/경고 의미
        #   - 시각적으로 눈에 띔
        #
        # dash='dash': 대시 라인 (- - - -)
        #   이유:
        #   - 실선(solid)과 구분
        #   - "계산된 값"임을 표현
        #   - 점선(dot)보다 가독성 좋음
        #
        # 다른 dash 옵션:
        # ────────────────────────────────────────────────────
        # 'solid': 실선 ───────
        # 'dot': 점선 ·······
        # 'dashdot': 혼합 -·-·-·-

        hovertemplate='평균: %{y:.1f}<extra></extra>'
        # 툴팁: "평균: 47.5"
        # 실시간 라인과 다른 텍스트로 구분
    ))

    # ═══════════════════════════════════════════════════════════════════════
    # Step 8: 현재 시점 마커 (빨간 수직선)
    # ═══════════════════════════════════════════════════════════════════════

    add_current_time_marker(fig, current_time)
    # 함수 내부:
    # ────────────────────────────────────────────────────────────────
    # fig.add_vline(
    #     x=current_time,           # X축 위치
    #     line_width=1,             # 선 두께
    #     line_dash="solid",        # 실선
    #     line_color="rgba(255, 0, 0, 0.8)"  # 빨간색 (80% 불투명)
    # )
    #
    # add_vline: Vertical Line (수직선) 추가
    #
    # 왜 빨간 수직선?
    # ────────────────────────────────────────────────────────────────
    # 1. "지금 여기" 명확히 표시
    # 2. 빨강 = 주목해야 할 위치
    # 3. 수직선 = 특정 시점 강조
    #
    # 투명도 80% (A=0.8) 이유:
    # ────────────────────────────────────────────────────────────────
    # 100%: 너무 진해서 데이터 가림
    # 50%: 너무 흐려서 안 보임
    # 80%: 명확하면서도 데이터 방해 안 함

    # ═══════════════════════════════════════════════════════════════════════
    # Step 9: 위험 임계값 (90%) 수평선
    # ═══════════════════════════════════════════════════════════════════════

    fig.add_hline(
        # add_hline: Horizontal Line (수평선) 추가
        # 왜 수평선? Y축 고정 기준선 표시

        y=FAILURE_CRITICAL_THRESHOLD,
        # Y=90 위치에 선 그리기
        # FAILURE_CRITICAL_THRESHOLD = 90.0

        line_width=2,
        # 선 두께 2픽셀
        # 경고선(1.5)보다 굵게 → 더 중요함 강조

        line_dash="dash",
        # 대시 라인 (- - - -)
        # 이유:
        # ────────────────────────────────────────────────────
        # 실선: 실제 데이터와 혼동
        # 대시: 기준선임을 명확히 표시

        line_color="rgba(255, 0, 0, 0.5)",
        # 빨간색, 50% 투명도
        # ────────────────────────────────────────────────────
        # 빨강(255, 0, 0): 위험 신호
        # 50% 투명: 데이터 라인 방해 안 함
        #
        # 왜 경고선(주황)보다 투명?
        # ────────────────────────────────────────────────────
        # 위험선까지 가는 경우가 드물어서
        # 평소엔 배경처럼, 필요시 강조

        annotation_text=f"위험 임계치 ({FAILURE_CRITICAL_THRESHOLD:.0f})",
        # 선 옆에 표시될 텍스트
        # ────────────────────────────────────────────────────
        # f"{변수:.0f}": 소수점 0자리 (정수)
        # 결과: "위험 임계치 (90)"
        #
        # 왜 표시?
        # ────────────────────────────────────────────────────
        # 선만 있으면 무슨 기준인지 모름
        # 텍스트로 명확히 설명

        annotation_position="right",
        # 텍스트를 선의 오른쪽 끝에 배치
        # 이유: 왼쪽은 Y축 숫자와 겹칠 수 있음

        annotation_font_size=10
        # 글자 크기 10pt
        # 이유: 너무 크면 시각적 방해, 너무 작으면 안 보임
    )

    # ═══════════════════════════════════════════════════════════════════════
    # Step 10: 경고 임계값 (70%) 수평선
    # ═══════════════════════════════════════════════════════════════════════

    fig.add_hline(
        y=FAILURE_WARNING_THRESHOLD,
        # Y=70 위치
        # FAILURE_WARNING_THRESHOLD = 70.0

        line_width=1.5,
        # 선 두께 1.5픽셀
        # 위험선(2)보다 얇게 → 덜 중요함

        line_dash="dot",
        # 점선 (· · · · ·)
        # ────────────────────────────────────────────────────
        # 위험선(dash)과 시각적 구분
        # 점선 = 경고 수준 (덜 심각)
        #
        # 시각적 위계:
        # ────────────────────────────────────────────────────
        # 실선(solid) > 대시(dash) > 점선(dot)
        # 위험선(대시) > 경고선(점선)

        line_color="rgba(255, 165, 0, 0.5)",
        # 주황색, 50% 투명도
        # ────────────────────────────────────────────────────
        # 주황(255, 165, 0): 경고 신호
        #   - 빨강(위험)과 구분
        #   - 노랑보다 진해서 가시성 좋음
        # 50% 투명: 배경으로 처리

        annotation_text=f"경고 ({FAILURE_WARNING_THRESHOLD:.0f})",
        # 텍스트: "경고 (70)"
        # 위험선보다 간결 (공간 절약)

        annotation_position="right",
        annotation_font_size=9
        # 글자 크기 9pt
        # 위험선(10pt)보다 작게 → 중요도 차이 표현
    )

    # ═══════════════════════════════════════════════════════════════════════
    # Step 11: 동적 X축 범위 계산 (슬라이딩 윈도우)
    # ═══════════════════════════════════════════════════════════════════════

    x_range_start, x_range_end = calculate_dynamic_xaxis_range(current_time)
    # 함수 내부:
    # ────────────────────────────────────────────────────────────────
    # half_window = 100초 / 2 = 50초
    # x_range_start = current_time - 50초
    # x_range_end = current_time + 50초
    #
    # 예시:
    # current_time = 10:05:30
    # x_range_start = 10:04:40
    # x_range_end = 10:06:20
    #
    # 효과: 현재를 중심으로 ±50초만 표시

    # ═══════════════════════════════════════════════════════════════════════
    # Step 12: 레이아웃 설정 (차트 전체 스타일)
    # ═══════════════════════════════════════════════════════════════════════

    fig.update_layout(
        # update_layout: 차트 전체 설정 변경

        # ───────────────────────────────────────────────────────────────
        # 제목 설정
        # ───────────────────────────────────────────────────────────────
        title={
            'text': f"{status_text} 위험도 지수: {current_prob:.1f}%",
            # 동적 제목 생성
            # ────────────────────────────────────────────────────
            # status_text = "🟢 정상" or "🟡 경고" or "🔴 위험"
            # current_prob = 48.15
            #
            # 결과:
            # "🟢 정상 위험도 지수: 48.2%"
            # "🟡 경고 위험도 지수: 72.5%"
            # "🔴 위험 위험도 지수: 91.3%"
            #
            # 이모지 사용 이유:
            # ────────────────────────────────────────────────────
            # 1. 색맹 사용자 배려
            # 2. 즉각적 인식 (색 + 아이콘)
            # 3. 현대적 UI 느낌

            'font': {'size': 20, 'color': line_color}
            # 제목 글자 스타일
            # ────────────────────────────────────────────────────
            # size=20: 큰 글씨 (중요한 정보)
            # color=line_color: 상태에 따라 색상 변경
            #   - 정상: 초록
            #   - 경고: 주황
            #   - 위험: 빨강
            #
            # 효과: 제목만 봐도 상태 인식!
        },

        # ───────────────────────────────────────────────────────────────
        # X축 (시간축) 설정
        # ───────────────────────────────────────────────────────────────
        xaxis=dict(
            title="시간",
            # X축 레이블

            range=[x_range_start, x_range_end],
            # X축 표시 범위
            # ────────────────────────────────────────────────────
            # [10:04:40, 10:06:20] (현재 ±50초)
            #
            # 왜 range 지정?
            # ────────────────────────────────────────────────────
            # 지정 안 하면: 전체 데이터 표시 (0초~끝)
            # 지정하면: 최근 100초만 표시 (슬라이딩)

            showgrid=True,
            # 그리드 라인 표시 여부
            # True: 세로 점선들 표시
            # 이유: 특정 시간대 값 읽기 쉬움

            gridcolor='rgba(200, 200, 200, 0.3)',
            # 그리드 색상
            # ────────────────────────────────────────────────────
            # 연한 회색(200, 200, 200)
            # 30% 투명도
            #
            # 왜 연하게?
            # ────────────────────────────────────────────────────
            # 진하면: 데이터 라인이 묻힘
            # 연하면: 보조선 역할만

            type='date',
            # X축 타입을 날짜/시간으로 설정
            # ────────────────────────────────────────────────────
            # 효과:
            # 1. 자동으로 시간 포맷 적용
            # 2. 줌 시 단위 자동 조정
            #    (초 → 분 → 시 → 일)
            # 3. 마우스 오버 시 정확한 시간 표시

            tickformat='%H:%M:%S',
            # 시간 표시 형식
            # ────────────────────────────────────────────────────
            # %H: 시간 (00~23)
            # %M: 분 (00~59)
            # %S: 초 (00~59)
            #
            # 결과: "10:05:30"
            #
            # 다른 옵션:
            # ────────────────────────────────────────────────────
            # '%Y-%m-%d': "2025-01-15"
            # '%H:%M': "10:05" (초 생략)
            # '%I:%M %p': "10:05 AM" (12시간제)

            dtick=10000
            # 눈금 간격 (밀리초 단위)
            # ────────────────────────────────────────────────────
            # 10000ms = 10초
            #
            # 효과:
            # X축에 10:04:40, 10:04:50, 10:05:00, ...
            # 10초마다 눈금 표시
            #
            # 왜 10초?
            # ────────────────────────────────────────────────────
            # 1초: 너무 빽빽 (100개 눈금)
            # 30초: 너무 듬성 (3~4개만)
            # 10초: 적당히 읽기 쉬움 (10개)
        ),

        # ───────────────────────────────────────────────────────────────
        # Y축 (위험도축) 설정
        # ───────────────────────────────────────────────────────────────
        yaxis=dict(
            title="위험도 지수 (%)",
            # Y축 레이블
            # % 표시로 0~100 범위임을 명시

            range=[-5, 105],
            # Y축 표시 범위
            # ────────────────────────────────────────────────────
            # 왜 -5 ~ 105?
            # ────────────────────────────────────────────────────
            # 실제 데이터: 0~100
            #
            # -5: 0보다 약간 아래
            #   - 0% 값이 X축에 붙지 않게
            #   - 하단 여백 확보
            #
            # 105: 100보다 약간 위
            #   - 100% 값이 차트 끝에 붙지 않게
            #   - 상단 여백 확보
            #
            # 효과: 데이터가 차트 영역 안에서 여유롭게 표시

            showgrid=True,
            # 가로 그리드 라인 표시
            # 이유: 특정 위험도 값 읽기 쉬움

            gridcolor='rgba(200, 200, 200, 0.3)'
            # X축 그리드와 같은 스타일
            # 일관성 유지
        ),

        # ───────────────────────────────────────────────────────────────
        # 차트 크기
        # ───────────────────────────────────────────────────────────────
        height=CHART_HEIGHT['main'],
        # 높이 400픽셀
        # CHART_HEIGHT = {'main': 400, ...}
        #
        # 왜 400px?
        # ────────────────────────────────────────────────────────
        # 300px: 너무 납작 (데이터 읽기 어려움)
        # 600px: 너무 김 (스크롤 필요)
        # 400px: 한 화면에 딱 맞음

        # ───────────────────────────────────────────────────────────────
        # 테마 및 스타일
        # ───────────────────────────────────────────────────────────────
        template=PLOTLY_THEME,
        # 'plotly_white': 흰색 배경 테마
        #
        # 다른 테마:
        # ────────────────────────────────────────────────────────
        # 'plotly': 기본 (회색 배경)
        # 'plotly_dark': 검은 배경
        # 'seaborn': 통계 스타일
        # 'ggplot2': R 스타일
        #
        # 왜 white?
        # ────────────────────────────────────────────────────────
        # 1. 깔끔하고 전문적
        # 2. 인쇄/보고서에 적합
        # 3. 색 구분 명확

        hovermode='x unified',
        # 마우스 오버 동작 방식
        # ────────────────────────────────────────────────────────
        # 'x unified': X축 기준 통합 툴팁
        #
        # 효과:
        # ────────────────────────────────────────────────────────
        # 특정 시간(X)에 마우스 올리면
        # → 그 시간의 모든 trace 값 동시 표시
        #
        # 예시:
        # ┌─────────────────────┐
        # │ 10:05:30           │
        # │ 위험도: 48.2       │
        # │ 평균: 47.5         │
        # └─────────────────────┘
        #
        # 다른 옵션:
        # ────────────────────────────────────────────────────────
        # 'closest': 가장 가까운 점만
        # 'x': X축 기준이지만 개별 표시
        # False: 툴팁 없음

        showlegend=True,
        # 범례 표시 여부
        # True: 차트 상단에 [실시간 위험도] [10초 이동평균] 표시
        # 이유: 2개 라인 구분 필요

        legend=dict(
            orientation="h",
            # 'h': horizontal (가로 배치)
            # 'v': vertical (세로 배치)
            #
            # 왜 가로?
            # ────────────────────────────────────────────────────
            # 세로: 차트 오른쪽 공간 차지
            # 가로: 차트 위쪽, 공간 효율적

            yanchor="bottom",
            y=1.02,
            # 위치: 차트 위쪽 (y=1.02 = 차트 위 2%)
            # yanchor="bottom": 범례 박스 아래쪽 기준

            xanchor="right",
            x=1,
            # 위치: 오른쪽 끝 (x=1 = 100%)
            # xanchor="right": 범례 박스 오른쪽 기준
            #
            # 결과:
            # ┌───────────────────────────────────┐
            # │    [실시간] [평균] ← 오른쪽 정렬 │
            # ├───────────────────────────────────┤
            # │         차트 영역                 │
            # └───────────────────────────────────┘


            bgcolor='rgba(255, 255, 255, 0.8)'
            # 배경색: 흰색, 80% 불투명
            # ────────────────────────────────────────────────────
            # 왜 배경색?
            # ────────────────────────────────────────────────────
            # 배경 없으면: 차트 라인과 겹쳐 읽기 어려움
            # 흰 배경: 텍스트 가독성 확보
            # 80% 불투명: 아래 차트가 살짝 보임
        ),

        # ───────────────────────────────────────────────────────────────
        # 애니메이션 설정
        # ───────────────────────────────────────────────────────────────
        transition=ANIMATION_CONFIG['realtime'],
        # ANIMATION_CONFIG = {
        #     'realtime': {
        #         'duration': 300,
        #         'easing': 'cubic-in-out'
        #     }
        # }
        #
        # 차트 업데이트 시 애니메이션 효과
        # ────────────────────────────────────────────────────────
        # duration=300: 0.3초 동안 부드럽게 전환
        # easing='cubic-in-out': 천천히 시작 → 빠름 → 천천히 끝
        #
        # 왜 애니메이션?
        # ────────────────────────────────────────────────────────
        # 1. 데이터 급변 시 튀는 현상 방지
        # 2. 부드러운 전환으로 눈의 피로 감소
        # 3. 실시간 모니터링 느낌 향상
        #
        # 다른 easing 옵션:
        # ────────────────────────────────────────────────────────
        # 'linear': 일정 속도
        # 'ease-in': 천천히 시작
        # 'ease-out': 천천히 끝
        # 'elastic': 탄성 효과

        # ───────────────────────────────────────────────────────────────
        # 여백 설정
        # ───────────────────────────────────────────────────────────────
        margin=dict(l=60, r=60, t=80, b=60)
        # l: left (왼쪽)
        # r: right (오른쪽)
        # t: top (위쪽)
        # b: bottom (아래쪽)
        #
        # 단위: 픽셀
        # ────────────────────────────────────────────────────────
        # l=60: Y축 레이블 공간
        # r=60: 임계값 텍스트 공간
        # t=80: 제목 + 범례 공간 (가장 넓음)
        # b=60: X축 레이블 공간
        #
        # 왜 필요?
        # ────────────────────────────────────────────────────────
        # 기본 여백: 텍스트가 잘림
        # 충분한 여백: 모든 요소 깔끔하게 표시
    )

    # ═══════════════════════════════════════════════════════════════════════
    # Step 13: JSON 변환 및 반환
    # ═══════════════════════════════════════════════════════════════════════

    return pio.to_json(fig)
    # Plotly Figure → JSON 문자열 변환
    #
    # 왜 JSON으로 변환?
    # ────────────────────────────────────────────────────────────────
    # 1. Streamlit 캐싱: JSON은 직렬화 가능
    # 2. 네트워크 전송: 브라우저로 전송 시 JSON 형태
    # 3. 재사용: JSON 저장 → 나중에 로드 가능
    #
    # Streamlit에서 사용:
    # ────────────────────────────────────────────────────────────────
    # chart_json = plot_failure_probability_json(...)
    # fig = pio.from_json(chart_json)
    # st.plotly_chart(fig)


# ═════════════════════════════════════════════════════════════════════════════
# 요약: 왜 이렇게 설계했나?
# ═════════════════════════════════════════════════════════════════════════════

"""
■ 차트 디자인 철학
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. 단일 지표로 단순화
   ────────────────────────────────────────────────────────────────
   7개 복잡한 구성요소 → 1개 위험도 점수
   관리자가 3초 안에 상태 파악 가능


2. 다층적 정보 제공
   ────────────────────────────────────────────────────────────────
   실시간 값 (순간 상태)
   + 이동평균 (추세)
   + 임계값 (기준)
   + 색상 (직관)
   = 종합적 판단 가능


3. 시각적 위계
   ────────────────────────────────────────────────────────────────
   제목 (20pt, 색상) > 실시간 라인 (2.5px, 영역) > 이동평균 (2px, 대시)
   > 임계값 (점선/대시) > 그리드 (연한 회색)


4. 실시간 모니터링 최적화
   ────────────────────────────────────────────────────────────────
   - 슬라이딩 윈도우: 최근 100초 집중
   - 빨간 수직선: 현재 시점 강조
   - 애니메이션: 부드러운 업데이트
   - 10초 MA: 노이즈 제거하며 빠른 반응


5. 색상 심리학 활용
   ────────────────────────────────────────────────────────────────
   - 파란색: 신뢰, 전문성 (실시간 라인)
   - 빨간색: 위험, 주목 (이동평균, 임계값, 현재선)
   - 주황색: 경고, 주의 (경고 임계값)
   - 초록/주황/빨강: 신호등 개념 (제목)


6. 접근성 고려
   ────────────────────────────────────────────────────────────────
   - 이모지: 색맹 사용자 배려
   - 텍스트 레이블: 모든 기준선 설명
   - 충분한 대비: 가독성 확보
   - 툴팁: 정확한 수치 제공


7. 성능 최적화
   ────────────────────────────────────────────────────────────────
   - 사전 계산: 이동평균을 미리 계산
   - JSON 캐싱: 재계산 없이 재사용
   - 제한된 윈도우: 200개만 표시 (전체 아님)
"""